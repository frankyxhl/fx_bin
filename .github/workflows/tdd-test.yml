name: TDD Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-tests:
    name: üîí Critical Security Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        poetry install --with dev

    - name: Run Security Tests (CRITICAL)
      run: |
        echo "üîí Running CRITICAL security tests - these MUST pass!"
        export PATH="$HOME/.local/bin:$PATH"
        poetry run python -m pytest tests/security/test_pd_safety.py::TestPandasImportSafety -v --tb=short --no-cov

    - name: Security Scan with Bandit
      run: |
        echo "üîç Running security analysis..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run bandit -r fx_bin/ -f json -o bandit-report.json || true
        poetry run bandit -r fx_bin/ || true

    - name: Dependency Security Check
      run: |
        echo "üìã Checking dependencies for known vulnerabilities..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run safety check --json --output safety-report.json || true
        poetry run safety check || true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  safety-tests:
    name: üõ°Ô∏è High Priority Safety Tests
    runs-on: ubuntu-latest
    needs: security-tests
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        poetry install --with dev

    - name: Run Safety Tests (HIGH Priority)
      run: |
        echo "üõ°Ô∏è Running HIGH priority safety tests..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run python -m pytest tests/security/test_replace_safety.py -v --tb=short --no-cov
        poetry run python -m pytest tests/security/test_common_safety.py -v --tb=short --no-cov

  functionality-tests:
    name: ‚öôÔ∏è Functionality Tests
    runs-on: ubuntu-latest
    needs: safety-tests
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        poetry install --with dev

    - name: Run All Tests
      continue-on-error: true
      run: |
        echo "‚öôÔ∏è Running all functionality tests..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run python -m pytest tests/ -v --tb=short --ignore=tests/runners/ --no-cov

    - name: Code Coverage
      run: |
        echo "üìä Generating code coverage report..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run python -m pytest --cov=fx_bin --cov-report=xml --cov-report=html

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance-tests:
    name: üèÉ Performance Tests
    runs-on: ubuntu-latest
    needs: functionality-tests
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        poetry install --with dev

    - name: Run Performance Tests (Informational)
      continue-on-error: true
      run: |
        echo "üèÉ Running performance tests (informational only)..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run python -m pytest tests/performance/test_performance.py -v --tb=short || true

    - name: Performance Benchmarks
      continue-on-error: true
      run: |
        echo "üìà Running performance benchmarks..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run python -m pytest tests/performance/test_performance.py::TestBenchmarks::test_baseline_performance -v -s || true

  code-quality:
    name: üìã Code Quality Checks
    runs-on: ubuntu-latest
    needs: functionality-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        poetry install --with dev

    - name: Run Flake8
      run: |
        echo "üîç Running Flake8 linting..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run flake8 fx_bin/ --statistics

    - name: Run MyPy
      continue-on-error: true
      run: |
        echo "üîç Running MyPy type checking..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run mypy fx_bin/ || true

    - name: Check Code Formatting
      run: |
        echo "üé® Checking code formatting with Black..."
        export PATH="$HOME/.local/bin:$PATH"
        poetry run black --check fx_bin/ tests/ || true

  deployment-readiness:
    name: üö¢ Deployment Readiness
    runs-on: ubuntu-latest
    needs: [security-tests, safety-tests, functionality-tests]
    if: always()

    steps:
    - name: Check Critical Test Results
      run: |
        echo "üö¢ Checking deployment readiness..."

        # Check if critical tests passed
        SECURITY_SUCCESS="${{ needs.security-tests.result }}"
        SAFETY_SUCCESS="${{ needs.safety-tests.result }}"
        FUNCTIONALITY_SUCCESS="${{ needs.functionality-tests.result }}"

        echo "Security Tests: $SECURITY_SUCCESS"
        echo "Safety Tests: $SAFETY_SUCCESS"
        echo "Functionality Tests: $FUNCTIONALITY_SUCCESS"

        if [[ "$SECURITY_SUCCESS" == "success" && "$SAFETY_SUCCESS" == "success" ]]; then
          echo "‚úÖ DEPLOYMENT READY: Critical security and safety tests passed!"
          echo "üîê All security vulnerabilities have been addressed"
          echo "üõ°Ô∏è All safety measures are in place"

          if [[ "$FUNCTIONALITY_SUCCESS" == "success" ]]; then
            echo "üåü BONUS: All functionality tests also passed!"
          fi

          exit 0
        else
          echo "‚ùå DEPLOYMENT BLOCKED: Critical tests failed!"
          echo "üö´ Code is NOT ready for production deployment"

          if [[ "$SECURITY_SUCCESS" != "success" ]]; then
            echo "üö® CRITICAL: Security tests failed - security vulnerabilities present!"
          fi

          if [[ "$SAFETY_SUCCESS" != "success" ]]; then
            echo "‚ö†Ô∏è CRITICAL: Safety tests failed - risk of data loss or system instability!"
          fi

          exit 1
        fi
